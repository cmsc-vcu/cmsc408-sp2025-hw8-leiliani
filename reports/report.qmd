---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-leiliani>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell?
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select
 `Short Name`
from
 world_bank_data.wdi_country
where
 region is NULL
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
# create table
execute_ddl(cnx,"""
create table wdi_country as
select *
from world_bank_data.wdi_country
where region is not null;
""")
```

```{python}
# show number of records
run_sql_and_return_html(cnx,"""
select count(*) from wdi_country
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
## (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select count(*) from wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)

run_sql_and_return_html(cnx,"""
select distinct region
from wdi_country
order by region
""")

```

## Task 7

How many countries are in each region?

```{python}
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
select region, count(*) as "Number of Countries"
from wdi_country
group by region
order by region
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
SELECT region, `Long Name`
FROM wdi_country
WHERE region = 'North America'
ORDER BY
  CASE
    WHEN `Long Name` LIKE 'The %%' THEN SUBSTRING(`Long Name`, 5)
    ELSE `Long Name`
  END
""")

```

## Task 9

```{python}
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)

run_sql_and_return_html(cnx,"""
select region, `Short Name`, `Long Name`
from wdi_country
where `Short Name` = 'Qatar'
""")

```

## Task 10

```{python}
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)

run_sql_and_return_html(cnx,"""
select `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`,`Region`
from wdi_country
where
 `2-alpha code` <> `WB-2 code`
""")

```

## Task 11

```{python}
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT `Income Group`, COUNT(*) AS `Number of Countries`
FROM wdi_country
GROUP BY `Income Group`
ORDER BY COUNT(*) DESC;
""")

```

## Task 12

```{python}
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s) 
## in the first column.

run_sql_and_return_html(cnx,"""
SELECT
  `Short Name`,
  region,
  `Income Group`
FROM
  wdi_country
WHERE
  `Income Group` IS NULL AND region IS NOT NULL
ORDER BY
  region;
""")

```

## Task 13

```{python}
## OK, this HAS to be an error. Let's make a assumption that the country 
## in question, because they are oil-rich, are "high income".  
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'High income'
WHERE `Short Name` = 'Venezuela';
COMMIT;
""")

```
```{python}
## Now, display the country again to verify the change stuck!

run_sql_and_return_df(cnx,"""
SELECT `Short Name`, region, `Income Group`
FROM wdi_country
WHERE `Short Name` = 'Venezuela';
""")

```

## Task 14

```{python}
## Write a single query that show the number of countries in each 
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT
  region,
  `Income Group',
  count(*) AS count(*)
FROM
  wdi_country
WHERE
  region IS NOT NULL AND `Income Group` IS NOT NULL
GROUP BY
  region, `Income Group`
ORDER BY
  region, `Income Group`;
""")

```

## Task 15

```{python}
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with 
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT
  region,
  SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS `Low Income`,
  SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS `Low Middle`,
  SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS `Upper Middle`,
  SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS `High Income`,
  SUM(1) AS "Row Total"
FROM
  wdi_country
GROUP BY
  region
ORDER BY
  region;
""")

```

## Task 16

```{python}
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of 
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
select
  count(*),
  region,
  `Income Group`
from
  wdi_country
where
  `Income Group` = 'Low Income'
group by
  region,
  `Income Group`
order by
  count(*) desc
limit
  1
""")

```

## Task 17

```{python}
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
select
  `Country Code`,
  `Short Name`,
  region,
  `Income Group`
from
  wdi_country
where
  1=1
  and `Income Group` = (select `Income Group` from wdi_country where `Country Code`='MHL')
  and region = (select region from wdi_country where `Country Code`='MHL')
order by
  `Short Name`
""")

```

## Task 18

```{python}
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
with region_cte as (
    select region
    from wdi_country
    group by region
),
income_cte as (
    select `Income Group`
    from wdi_country
    where `Income Group` is not NULL
    group by `Income Group`
),
pair_cte as (
    select *
    from region_cte, income_cte
),
merge_cte as (
    select
       a.region, a.`Income Group`, count(b.`Short Name`) as '# Countries'
    from pair_cte a
    left join wdi_country b on (
            a.region = b.region
            and a.`Income Group` = b.`Income Group`
        )
    group by 
    a.region, a.`Income Group`
)
select *
from merge_cte
where 
    Num_Countries = 0;

""")

```

## Task 19

```{python}
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx, """
WITH 
region_cte AS (
    SELECT region, COUNT(*) AS region_cnt 
    FROM wdi_country
    WHERE region IS NOT NULL
    GROUP BY region
), 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL
    GROUP BY `Income Group`
), 
total_cte AS (
    SELECT COUNT(*) AS total_cnt
    FROM wdi_country
    WHERE region IS NOT NULL
),
pair_cte AS (
    SELECT
        region,
        `Income Group`,
        COUNT(*) AS pair_cnt
    FROM
        wdi_country
    WHERE
        region IS NOT NULL
        AND `Income Group` IS NOT NULL
    GROUP BY
        region, `Income Group`
), 
merge_cte AS (
    SELECT
        a.region,
        a.`Income Group`,
        a.pair_cnt,
        b.region_cnt,
        c.income_cnt,
        d.total_cnt,
        ROUND(100.0 * a.pair_cnt / d.total_cnt, 1) AS `Pct of Total`
    FROM
        pair_cte a
        LEFT JOIN region_cte b ON a.region = b.region
        LEFT JOIN income_cte c ON a.`Income Group` = c.`Income Group`
        CROSS JOIN total_cte d
)
SELECT * 
FROM merge_cte;
""")

```

## Task 20

```{python}
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

run_sql_and_return_html(cnx,"""
WITH 
region_cte AS (
    SELECT region, COUNT(*) AS region_cnt 
    FROM wdi_country 
    GROUP BY region
), 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt 
    FROM wdi_country 
    GROUP BY `Income Group`
), 
total_cte AS (
    SELECT COUNT(*) AS total_cnt 
    FROM wdi_country
), 
pair_cte AS (
    SELECT
        region,
        `Income Group`,
        COUNT(*) AS pair_cnt
    FROM
        wdi_country
    GROUP BY
        region, `Income Group`
), 
merge_cte AS (
    SELECT
        a.region,
        a.`Income Group`,
        a.pair_cnt,
        b.region_cnt,
        c.income_cnt AS income_cnt,  -- corrected alias
        d.total_cnt,
        100.0 * a.pair_cnt / d.total_cnt AS pct
    FROM
        pair_cte a
        LEFT JOIN region_cte b ON a.region = b.region
        LEFT JOIN income_cte c ON a.`Income Group` = c.`Income Group`
        CROSS JOIN total_cte d
)
SELECT
    region,
    ROUND(SUM(CASE WHEN `Income Group` = 'Low income' THEN pct ELSE 0 END), 1) AS `Low Income`,
    ROUND(SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN pct ELSE 0 END), 1) AS `Low Middle`,
    ROUND(SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN pct ELSE 0 END), 1) AS `Upper Middle`,
    ROUND(SUM(CASE WHEN `Income Group` = 'High income' THEN pct ELSE 0 END), 1) AS `High Income`,
    ROUND(SUM(pct), 1) AS `Row Total`
FROM
    merge_cte
GROUP BY
    region
ORDER BY
    region;
""")

```

## Task 21

```{python}
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx, """
WITH 
income_cte AS (
    SELECT `Income Group`, COUNT(*) AS income_cnt
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL AND `Region` IS NOT NULL
    GROUP BY `Income Group`
),
total_cte AS (
    SELECT COUNT(*) AS total_cnt
    FROM wdi_country
    WHERE `Region` IS NOT NULL
)
SELECT
    `Income Group`,
    income_cnt,
    total_cnt,
    ROUND(100.0 * income_cnt / total_cnt, 1) AS `Pct of Total`
FROM
    income_cte,
    total_cte
ORDER BY
    `Income Group`;
""")

```


# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

Throughout these exercises, I felt most confident using basic SQL operations like SELECT, WHERE, ORDER BY, and simple GROUP BY queries. I was also comfortable using aggregate functions such as COUNT and SUM to summarize the data. The skills that I realized I need more practice with include more advanced operations like using CASE statements for conditional aggregation and writing nested subqueries to reference results from one query inside another. The repeated practice through the countless exercises helped reinforce SQL in my brain. I also became more comfortable with updating records and committing changes carefully, which is crucial when working in production databases.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

For the more complex tasks like 18, 23, and 24, my approach was to break each problem into smaller parts. First, I reread the task description carefully to make sure I understood the expected output. Then, I identified what basic queries or SQL concepts would be involved (e.g., grouping, conditional counts, subqueries). I often started by writing a simple version of the query to make sure I was selecting the right data, and then gradually added more complexity (like a CASE statement or subquery) once I knew the base was correct.

When I encountered challenges, I would test small parts of the query individually, or look at a few rows of output to debug mistakes. If I got stuck, I sometimes rewrote the query using a different strategy or read the hints provided in the notebook.

In the future, for very complex SQL problems, I would plan my queries more visually first—maybe sketching a diagram of relationships or the desired output table—before jumping into coding. This would save time debugging and make my logic clearer from the start.


3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

The biggest takeaway from this assignment was seeing that SQL is not just about retrieving data, but also about transforming, cleaning, and summarizing data into meaningful reports. I also learned how important attention to detail is, especially when working with real-world data that can be messy or inconsistent (like missing income groups or non-country entries).

These skills are directly applicable to many real-world scenarios, such as business reporting, scientific data analysis, and building back-end data pipelines for applications. In future coursework, especially classes related to data science, databases, or machine learning, being able to quickly and accurately manipulate datasets using SQL will be a huge advantage. I feel much more prepared to work with real databases after completing this homework.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

